#include "parcellationcolorscheme.h"
#include <QFile>
#include <QDebug>
#include <QFileInfo>
#include <QStringList>

/// this is the color tabl
static const int s_color_table_size = 456;
static const double s_aiColorTable[s_color_table_size][3] =
{
    {255,255,255},
    {61,220,220},
    {60,60,60},
    {181,220,20},
    {237,14,230},
    {25,60,250},
    {239,10,75},
    {25,255,100},
    {221,187,16},
    {203,182,143},
    {124,186,220},
    {134,4,160},
    {50,50,50},
    {199,58,250},
    {100,200,200},
    {224,224,224},
    {30,255,80},
    {255,204,102},
    {45,200,15},
    {20,100,201},
    {133,203,229},
    {80,255,50},
    {64,0,64},
    {20,130,180},
    {60,100,60},
    {20,60,100},
    {147,19,173},
    {140,220,220},
    {223,216,20},
    {25,150,60},
    {238,59,59},
    {73,62,139},
    {195,35,195},
    {0,196,255},
    {120,62,43},
    {21,220,20},
    {221,20,100},
    {200,2,100},
    {124,141,178},
    {21,220,60},
    {180,20,20},
    {220,216,20},
    {255,165,0},
    {23,60,180},
    {124,143,178},
    {175,95,235},
    {124,140,179},
    {237,11,175},
    {51,50,135},
    {255,80,200},
    {220,180,140},
    {61,20,220},
    {235,11,175},
    {117,160,175},
    {165,42,42},
    {60,20,220},
    {232,146,35},
    {150,10,200},
    {204,182,142},
    {63,100,60},
    {0,119,85},
    {20,180,130},
    {205,63,78},
    {120,190,150},
    {160,200,255},
    {65,135,20},
    {120,70,50},
    {25,210,90},
    {42,201,168},
    {61,220,100},
    {204,0,255},
    {160,255,50},
    {205,184,144},
    {255,160,0},
    {236,15,176},
    {60,20,140},
    {100,50,100},
    {122,187,222},
    {235,155,205},
    {128,128,255},
    {55,220,180},
    {60,60,220},
    {32,200,255},
    {26,60,150},
    {153,221,239},
    {60,58,210},
    {101,20,20},
    {20,100,50},
    {128,32,255},
    {20,60,220},
    {235,35,195},
    {120,100,60},
    {60,140,180},
    {121,185,220},
    {140,20,60},
    {238,11,175},
    {128,128,128},
    {119,187,102},
    {166,42,42},
    {238,130,176},
    {164,108,226},
    {80,200,255},
    {230,155,215},
    {155,230,255},
    {173,255,47},
    {236,17,228},
    {196,160,128},
    {120,18,134},
    {0,0,64},
    {61,180,250},
    {52,209,226},
    {255,204,153},
    {242,241,240},
    {70,130,181},
    {250,255,50},
    {120,20,134},
    {226,0,0},
    {119,159,176},
    {42,204,167},
    {220,20,100},
    {25,25,25},
    {61,180,60},
    {230,155,215},
    {255,200,80},
    {255,0,0},
    {235,35,95},
    {75,215,135},
    {218,230,76},
    {0,200,221},
    {236,14,230},
    {3,147,6},
    {30,115,115},
    {250,250,0},
    {125,140,178},
    {30,144,255},
    {104,255,255},
    {21,180,140},
    {135,155,195},
    {0,255,127},
    {4,114,14},
    {16,46,250},
    {255,160,200},
    {140,20,140},
    {220,251,163},
    {115,35,35},
    {198,58,250},
    {180,40,120},
    {74,155,60},
    {100,25,0},
    {220,180,220},
    {80,196,98},
    {0,0,139},
    {0,128,0},
    {26,237,57},
    {255,218,185},
    {255,164,164},
    {3,148,6},
    {230,148,34},
    {34,139,34},
    {220,60,20},
    {80,160,20},
    {221,248,164},
    {70,130,180},
    {21,39,132},
    {8,114,14},
    {125,186,220},
    {220,252,163},
    {238,174,238},
    {138,13,206},
    {206,65,78},
    {141,60,20},
    {120,19,134},
    {7,114,14},
    {221,140,20},
    {42,206,167},
    {65,220,60},
    {122,186,220},
    {237,12,177},
    {220,216,21},
    {51,17,18},
    {21,10,10},
    {197,58,250},
    {255,255,0},
    {63,20,220},
    {233,147,33},
    {150,150,200},
    {121,17,136},
    {230,250,230},
    {21,20,60},
    {160,100,50},
    {185,185,185},
    {220,180,20},
    {25,210,60},
    {103,255,255},
    {1,148,0},
    {33,150,250},
    {255,100,100},
    {20,100,200},
    {25,100,40},
    {204,153,204},
    {232,148,33},
    {245,241,240},
    {1,225,176},
    {220,220,100},
    {207,62,78},
    {0,100,255},
    {12,48,255},
    {74,130,181},
    {160,0,255},
    {205,179,139},
    {126,140,178},
    {15,46,250},
    {45,205,165},
    {26,60,75},
    {3,149,6},
    {200,70,255},
    {35,75,115},
    {220,248,164},
    {10,200,200},
    {244,245,245},
    {196,196,0},
    {35,235,235},
    {95,155,205},
    {25,180,90},
    {170,10,200},
    {223,220,60},
    {20,180,140},
    {139,121,94},
    {25,20,140},
    {128,96,64},
    {0,126,75},
    {12,49,255},
    {72,61,139},
    {243,241,240},
    {195,255,200},
    {255,167,0},
    {221,20,220},
    {236,14,176},
    {221,39,200},
    {21,140,200},
    {236,11,175},
    {25,120,60},
    {180,20,30},
    {61,20,180},
    {105,105,55},
    {128,196,164},
    {141,20,100},
    {128,255,128},
    {13,48,255},
    {205,205,0},
    {220,253,163},
    {126,186,220},
    {120,21,133},
    {0,148,0},
    {128,0,0},
    {255,210,0},
    {23,10,10},
    {20,220,160},
    {70,70,70},
    {255,80,0},
    {220,180,205},
    {180,205,130},
    {236,13,227},
    {72,130,180},
    {115,235,115},
    {150,45,70},
    {20,60,120},
    {61,20,60},
    {80,255,200},
    {180,20,140},
    {255,50,80},
    {238,10,175},
    {143,20,220},
    {181,200,20},
    {25,140,20},
    {204,68,35},
    {75,50,125},
    {255,128,128},
    {0,226,0},
    {40,255,167},
    {239,11,175},
    {135,206,235},
    {220,20,20},
    {221,216,20},
    {120,200,20},
    {221,100,20},
    {35,75,35},
    {1,118,14},
    {135,185,205},
    {10,100,255},
    {140,100,180},
    {35,75,50},
    {61,60,100},
    {13,0,250},
    {62,10,205},
    {101,60,220},
    {238,13,177},
    {0,118,14},
    {0,225,0},
    {239,160,223},
    {12,50,255},
    {200,35,75},
    {222,216,20},
    {95,115,75},
    {205,10,125},
    {12,46,250},
    {121,18,134},
    {5,200,90},
    {0,0,208},
    {10,49,255},
    {197,150,250},
    {244,241,240},
    {204,68,34},
    {221,187,17},
    {196,58,250},
    {23,220,60},
    {255,200,160},
    {20,220,60},
    {120,118,14},
    {255,0,160},
    {0,255,160},
    {255,0,255},
    {21,220,220},
    {221,20,10},
    {238,0,0},
    {75,35,115},
    {72,132,181},
    {20,30,140},
    {2,149,2},
    {0,0,255},
    {78,130,181},
    {63,180,180},
    {221,220,20},
    {200,200,200},
    {2,255,1},
    {235,75,115},
    {168,104,162},
    {255,20,147},
    {221,226,68},
    {42,204,164},
    {119,187,103},
    {75,130,181},
    {25,90,60},
    {0,160,255},
    {17,85,136},
    {255,148,10},
    {65,100,20},
    {254,191,31},
    {175,10,176},
    {160,32,240},
    {0,255,255},
    {232,147,33},
    {0,50,128},
    {236,16,231},
    {100,100,100},
    {195,235,35},
    {35,235,245},
    {243,243,243},
    {205,62,78},
    {25,150,90},
    {231,148,34},
    {100,0,100},
    {21,20,240},
    {221,60,140},
    {246,241,240},
    {227,45,100},
    {42,205,167},
    {254,254,254},
    {220,60,220},
    {255,255,254},
    {236,13,176},
    {124,144,178},
    {225,140,140},
    {26,60,0},
    {51,17,17},
    {225,140,141},
    {1,255,1},
    {221,60,60},
    {101,100,180},
    {220,20,10},
    {0,119,86},
    {221,249,166},
    {41,255,167},
    {21,20,200},
    {80,50,255},
    {101,60,60},
    {183,100,20},
    {25,60,60},
    {121,20,135},
    {25,60,61},
    {206,62,78},
    {5,114,14},
    {127,140,178},
    {180,60,180},
    {100,5,200},
    {208,62,78},
    {17,85,137},
    {207,63,79},
    {221,217,21},
    {197,60,248},
    {160,140,180},
    {237,18,232},
    {35,195,235},
    {35,235,155},
    {0,200,200},
    {6,114,14},
    {77,130,181},
    {60,25,25},
    {25,180,60},
    {14,46,250},
    {153,221,238},
    {125,100,160},
    {238,238,209},
    {141,100,220},
    {20,30,40},
    {100,100,60},
    {0,255,0},
    {180,60,60},
    {21,180,180},
    {235,225,115},
    {234,169,30},
    {230,7,100},
    {232,146,33},
    {209,62,78},
    {200,58,250},
    {175,235,115},
    {76,130,181},
    {224,216,20},
    {195,61,246},
    {74,255,74},
    {255,166,0},
    {80,20,140},
    {130,155,95},
    {155,255,155},
    {123,186,221},
    {13,46,250},
    {0,0,160},
    {140,60,60},
    {204,0,254},
    {35,195,35},
    {180,220,140},
    {245,245,245},
    {121,184,220},
    {135,50,74},
    {122,135,50},
    {60,220,60},
    {123,186,220},
    {124,142,178},
    {121,186,220},
    {0,0,112},
    {255,192,32},
    {141,21,100},
    {124,140,178},
    {60,220,20},
    {38,213,176},
    {21,20,140},
};



ParcellationColorScheme::ParcellationColorScheme(QObject *parent) : QObject(parent)
{
    setValid(false);
}

void ParcellationColorScheme::autoFill(int iLabelMax)
{
    /// clear the old one
    this->getColorMap().clear();

    /// fill new one with the static color table
    for(int i = 0; i <= iLabelMax; i++)
    {
        this->getColorMap()[i] = QColor::fromRgb( s_aiColorTable[i%s_color_table_size][0],
                                                  s_aiColorTable[i%s_color_table_size][1],
                                                  s_aiColorTable[i%s_color_table_size][2]);
    }
    setValid(true);
    /// notify update
    emit updated(this);

}


bool ParcellationColorScheme::loadColorScheme(QString strFilename)
{

    QFile cInFile(strFilename);
    if(cInFile.open(QIODevice::ReadOnly) == false)
    {
        qWarning() << "Open Parcellation Label Failed:" << strFilename;
        return false;
    }

    /// clear the old one
    this->getColorMap().clear();

    /// read the new one
    int iLabel = -1;
    QColor cLabelColor;


    /// expecting label, R, G, B in each line.
    /// R, G, B are 0-255 integers
    QTextStream cInStream(&cInFile);
    QString strLine;
    int iLineNum = 0;
    while(cInStream.atEnd() == false)
    {
        ++iLineNum;
        strLine = cInStream.readLine();
        QStringList strList = strLine.split(",", QString::SkipEmptyParts);
        if(strList.size() != 4)
        {
            qWarning() << "Line" << iLineNum << "Has" << strList.size() << "Elements. Expecting 4 Elements Per Line.";
            this->getColorMap().clear();
            this->setValid(false);
            return false;
        }
        bool bAllOK = true;
        bool bOK, bOKR, bOKG, bOKB;

        iLabel = strList[0].toInt(&bOK);
        bAllOK = bAllOK && bOK;

        cLabelColor = QColor::fromRgb( strList[1].toInt(&bOKR),
                                       strList[2].toInt(&bOKG),
                                       strList[3].toInt(&bOKB));
        bAllOK = bAllOK && bOKR; bAllOK = bAllOK && bOKG; bAllOK = bAllOK && bOKB;

        if(bAllOK == false)
        {
            qWarning() << "Expecting the Elements to Be a Number in Line" << iLineNum << ".";
            this->getColorMap().clear();
            this->setValid(false);
            return false;
        }

        /// add one key-value pair
        if(this->getColorMap().contains(iLabel) == true)
        {
            qWarning() << "Duplicate Label" << iLabel << "Found in Line" << iLineNum << ".";
            this->getColorMap().clear();
            this->setValid(false);
            return false;
        }
        this->getColorMap()[iLabel] = cLabelColor;

    }
    this->setName(QFileInfo(strFilename).baseName());
    this->setValid(true);
    emit updated(this);
    return true;

}

bool ParcellationColorScheme::query(int iLabel, QColor *pcLabelColor)
{
    if(this->getValid() == false)
        return false;

    if(this->getColorMap().contains(iLabel) == true)
    {
        *pcLabelColor = this->getColorMap()[iLabel];
        return true;
    }
    else
    {
        qWarning() << "Label" << iLabel << "Dose Not Exist.";
        return false;
    }
}
